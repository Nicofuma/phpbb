<?php
/**
*
* This file is part of the phpBB Forum Software package.
*
* @copyright (c) phpBB Limited <https://www.phpbb.com>
* @license GNU General Public License, version 2 (GPL-2.0)
*
* For full copyright and license information, please see
* the docs/CREDITS.txt file.
*
*/

namespace phpbb\security\listener;

use phpbb\routing\helper;
use phpbb\security\voter\re_authenticated_voter;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use Symfony\Component\Security\Core\Authorization\AccessDecisionManager;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\Security\Http\Util\TargetPathTrait;

/**
 * Handle AccessDeniedException if it was generated by the lack of IS_REAUTHENTICATED role
 */
class re_authenticated_listener implements EventSubscriberInterface
{
	const PROVIDER_KEY = 're_authentication';

	use TargetPathTrait;

	/** @var null|LoggerInterface */
	private $logger;

	/** @var AccessDecisionManager */
	private $accessDecisionManager;

	/** @var TokenStorageInterface */
	private $tokenStorage;

	/** @var helper */
	private $routing_helper;

	/**
	 * @param TokenStorageInterface $tokenStorage
	 * @param AccessDecisionManager $accessDecisionManager
	 * @param helper                $routing_helper
	 * @param LoggerInterface       $logger
	 */
	public function __construct(TokenStorageInterface $tokenStorage, AccessDecisionManager $accessDecisionManager, helper $routing_helper, LoggerInterface $logger = null)
	{
		$this->logger = $logger ?: new NullLogger();
		$this->accessDecisionManager = $accessDecisionManager;
		$this->tokenStorage = $tokenStorage;
		$this->routing_helper = $routing_helper;
	}

	public function on_kernel_exception(GetResponseForExceptionEvent $event)
	{
		$exception = $event->getException();
		do
		{
			if ($exception instanceof AccessDeniedException)
			{
				foreach ($exception->getAttributes() as $role)
				{
					if ($role === re_authenticated_voter::IS_REAUTHENTICATED && !$this->accessDecisionManager->decide($this->tokenStorage->getToken(), [$role], $exception->getObject()))
					{
						$this->saveTargetPath($event->getRequest()->getSession(), static::PROVIDER_KEY, $event->getRequest()->getUri());
						$event->setResponse(new RedirectResponse($this->routing_helper->route('phpbb_user_confirm_password')));
						$event->stopPropagation();
					}
				}
			}
		}
		while (null !== $exception = $exception->getPrevious());
	}

	static public function getSubscribedEvents()
	{
		return array(
			KernelEvents::EXCEPTION => ['on_kernel_exception', 128],
		);
	}
}
